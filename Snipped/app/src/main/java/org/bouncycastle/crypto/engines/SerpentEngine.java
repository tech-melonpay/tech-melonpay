package org.bouncycastle.crypto.engines;

import org.bouncycastle.crypto.BlockCipher;
import org.bouncycastle.util.Pack;

/* loaded from: classes2.dex */
public final class SerpentEngine extends SerpentEngineBase {
    @Override // org.bouncycastle.crypto.engines.SerpentEngineBase
    public void decryptBlock(byte[] bArr, int i, byte[] bArr2, int i9) {
        int littleEndianToInt = this.wKey[131] ^ Pack.littleEndianToInt(bArr, i + 12);
        int[] iArr = {this.wKey[128] ^ Pack.littleEndianToInt(bArr, i), this.wKey[129] ^ Pack.littleEndianToInt(bArr, i + 4), this.wKey[130] ^ Pack.littleEndianToInt(bArr, i + 8), littleEndianToInt};
        ib7(iArr, iArr[0], iArr[1], iArr[2], littleEndianToInt);
        int i10 = iArr[0];
        int[] iArr2 = this.wKey;
        iArr[0] = i10 ^ iArr2[124];
        iArr[1] = iArr[1] ^ iArr2[125];
        iArr[2] = iArr[2] ^ iArr2[126];
        iArr[3] = iArr[3] ^ iArr2[127];
        inverseLT(iArr);
        ib6(iArr, iArr[0], iArr[1], iArr[2], iArr[3]);
        int i11 = iArr[0];
        int[] iArr3 = this.wKey;
        iArr[0] = i11 ^ iArr3[120];
        iArr[1] = iArr[1] ^ iArr3[121];
        iArr[2] = iArr[2] ^ iArr3[122];
        iArr[3] = iArr[3] ^ iArr3[123];
        inverseLT(iArr);
        ib5(iArr, iArr[0], iArr[1], iArr[2], iArr[3]);
        int i12 = iArr[0];
        int[] iArr4 = this.wKey;
        iArr[0] = i12 ^ iArr4[116];
        iArr[1] = iArr[1] ^ iArr4[117];
        iArr[2] = iArr[2] ^ iArr4[118];
        iArr[3] = iArr[3] ^ iArr4[119];
        inverseLT(iArr);
        ib4(iArr, iArr[0], iArr[1], iArr[2], iArr[3]);
        int i13 = iArr[0];
        int[] iArr5 = this.wKey;
        iArr[0] = i13 ^ iArr5[112];
        iArr[1] = iArr[1] ^ iArr5[113];
        iArr[2] = iArr[2] ^ iArr5[114];
        iArr[3] = iArr[3] ^ iArr5[115];
        inverseLT(iArr);
        ib3(iArr, iArr[0], iArr[1], iArr[2], iArr[3]);
        int i14 = iArr[0];
        int[] iArr6 = this.wKey;
        iArr[0] = i14 ^ iArr6[108];
        iArr[1] = iArr[1] ^ iArr6[109];
        iArr[2] = iArr[2] ^ iArr6[110];
        iArr[3] = iArr[3] ^ iArr6[111];
        inverseLT(iArr);
        ib2(iArr, iArr[0], iArr[1], iArr[2], iArr[3]);
        int i15 = iArr[0];
        int[] iArr7 = this.wKey;
        iArr[0] = i15 ^ iArr7[104];
        iArr[1] = iArr[1] ^ iArr7[105];
        iArr[2] = iArr[2] ^ iArr7[106];
        iArr[3] = iArr[3] ^ iArr7[107];
        inverseLT(iArr);
        ib1(iArr, iArr[0], iArr[1], iArr[2], iArr[3]);
        int i16 = iArr[0];
        int[] iArr8 = this.wKey;
        iArr[0] = i16 ^ iArr8[100];
        iArr[1] = iArr[1] ^ iArr8[101];
        iArr[2] = iArr[2] ^ iArr8[102];
        iArr[3] = iArr[3] ^ iArr8[103];
        inverseLT(iArr);
        ib0(iArr, iArr[0], iArr[1], iArr[2], iArr[3]);
        int i17 = iArr[0];
        int[] iArr9 = this.wKey;
        iArr[0] = i17 ^ iArr9[96];
        iArr[1] = iArr[1] ^ iArr9[97];
        iArr[2] = iArr[2] ^ iArr9[98];
        iArr[3] = iArr[3] ^ iArr9[99];
        inverseLT(iArr);
        ib7(iArr, iArr[0], iArr[1], iArr[2], iArr[3]);
        int i18 = iArr[0];
        int[] iArr10 = this.wKey;
        iArr[0] = i18 ^ iArr10[92];
        iArr[1] = iArr[1] ^ iArr10[93];
        iArr[2] = iArr[2] ^ iArr10[94];
        iArr[3] = iArr[3] ^ iArr10[95];
        inverseLT(iArr);
        ib6(iArr, iArr[0], iArr[1], iArr[2], iArr[3]);
        int i19 = iArr[0];
        int[] iArr11 = this.wKey;
        iArr[0] = i19 ^ iArr11[88];
        iArr[1] = iArr[1] ^ iArr11[89];
        iArr[2] = iArr[2] ^ iArr11[90];
        iArr[3] = iArr[3] ^ iArr11[91];
        inverseLT(iArr);
        ib5(iArr, iArr[0], iArr[1], iArr[2], iArr[3]);
        int i20 = iArr[0];
        int[] iArr12 = this.wKey;
        iArr[0] = i20 ^ iArr12[84];
        iArr[1] = iArr[1] ^ iArr12[85];
        iArr[2] = iArr[2] ^ iArr12[86];
        iArr[3] = iArr[3] ^ iArr12[87];
        inverseLT(iArr);
        ib4(iArr, iArr[0], iArr[1], iArr[2], iArr[3]);
        int i21 = iArr[0];
        int[] iArr13 = this.wKey;
        iArr[0] = i21 ^ iArr13[80];
        iArr[1] = iArr[1] ^ iArr13[81];
        iArr[2] = iArr[2] ^ iArr13[82];
        iArr[3] = iArr[3] ^ iArr13[83];
        inverseLT(iArr);
        ib3(iArr, iArr[0], iArr[1], iArr[2], iArr[3]);
        int i22 = iArr[0];
        int[] iArr14 = this.wKey;
        iArr[0] = i22 ^ iArr14[76];
        iArr[1] = iArr[1] ^ iArr14[77];
        iArr[2] = iArr[2] ^ iArr14[78];
        iArr[3] = iArr[3] ^ iArr14[79];
        inverseLT(iArr);
        ib2(iArr, iArr[0], iArr[1], iArr[2], iArr[3]);
        int i23 = iArr[0];
        int[] iArr15 = this.wKey;
        iArr[0] = i23 ^ iArr15[72];
        iArr[1] = iArr[1] ^ iArr15[73];
        iArr[2] = iArr[2] ^ iArr15[74];
        iArr[3] = iArr[3] ^ iArr15[75];
        inverseLT(iArr);
        ib1(iArr, iArr[0], iArr[1], iArr[2], iArr[3]);
        int i24 = iArr[0];
        int[] iArr16 = this.wKey;
        iArr[0] = i24 ^ iArr16[68];
        iArr[1] = iArr[1] ^ iArr16[69];
        iArr[2] = iArr[2] ^ iArr16[70];
        iArr[3] = iArr[3] ^ iArr16[71];
        inverseLT(iArr);
        ib0(iArr, iArr[0], iArr[1], iArr[2], iArr[3]);
        int i25 = iArr[0];
        int[] iArr17 = this.wKey;
        iArr[0] = i25 ^ iArr17[64];
        iArr[1] = iArr[1] ^ iArr17[65];
        iArr[2] = iArr[2] ^ iArr17[66];
        iArr[3] = iArr[3] ^ iArr17[67];
        inverseLT(iArr);
        ib7(iArr, iArr[0], iArr[1], iArr[2], iArr[3]);
        int i26 = iArr[0];
        int[] iArr18 = this.wKey;
        iArr[0] = i26 ^ iArr18[60];
        iArr[1] = iArr[1] ^ iArr18[61];
        iArr[2] = iArr[2] ^ iArr18[62];
        iArr[3] = iArr[3] ^ iArr18[63];
        inverseLT(iArr);
        ib6(iArr, iArr[0], iArr[1], iArr[2], iArr[3]);
        int i27 = iArr[0];
        int[] iArr19 = this.wKey;
        iArr[0] = i27 ^ iArr19[56];
        iArr[1] = iArr[1] ^ iArr19[57];
        iArr[2] = iArr[2] ^ iArr19[58];
        iArr[3] = iArr[3] ^ iArr19[59];
        inverseLT(iArr);
        ib5(iArr, iArr[0], iArr[1], iArr[2], iArr[3]);
        int i28 = iArr[0];
        int[] iArr20 = this.wKey;
        iArr[0] = i28 ^ iArr20[52];
        iArr[1] = iArr[1] ^ iArr20[53];
        iArr[2] = iArr[2] ^ iArr20[54];
        iArr[3] = iArr[3] ^ iArr20[55];
        inverseLT(iArr);
        ib4(iArr, iArr[0], iArr[1], iArr[2], iArr[3]);
        int i29 = iArr[0];
        int[] iArr21 = this.wKey;
        iArr[0] = i29 ^ iArr21[48];
        iArr[1] = iArr[1] ^ iArr21[49];
        iArr[2] = iArr[2] ^ iArr21[50];
        iArr[3] = iArr[3] ^ iArr21[51];
        inverseLT(iArr);
        ib3(iArr, iArr[0], iArr[1], iArr[2], iArr[3]);
        int i30 = iArr[0];
        int[] iArr22 = this.wKey;
        iArr[0] = i30 ^ iArr22[44];
        iArr[1] = iArr[1] ^ iArr22[45];
        iArr[2] = iArr[2] ^ iArr22[46];
        iArr[3] = iArr[3] ^ iArr22[47];
        inverseLT(iArr);
        ib2(iArr, iArr[0], iArr[1], iArr[2], iArr[3]);
        int i31 = iArr[0];
        int[] iArr23 = this.wKey;
        iArr[0] = i31 ^ iArr23[40];
        iArr[1] = iArr[1] ^ iArr23[41];
        iArr[2] = iArr[2] ^ iArr23[42];
        iArr[3] = iArr[3] ^ iArr23[43];
        inverseLT(iArr);
        ib1(iArr, iArr[0], iArr[1], iArr[2], iArr[3]);
        int i32 = iArr[0];
        int[] iArr24 = this.wKey;
        iArr[0] = i32 ^ iArr24[36];
        iArr[1] = iArr[1] ^ iArr24[37];
        iArr[2] = iArr[2] ^ iArr24[38];
        iArr[3] = iArr[3] ^ iArr24[39];
        inverseLT(iArr);
        ib0(iArr, iArr[0], iArr[1], iArr[2], iArr[3]);
        int i33 = iArr[0];
        int[] iArr25 = this.wKey;
        iArr[0] = i33 ^ iArr25[32];
        iArr[1] = iArr[1] ^ iArr25[33];
        iArr[2] = iArr[2] ^ iArr25[34];
        iArr[3] = iArr[3] ^ iArr25[35];
        inverseLT(iArr);
        ib7(iArr, iArr[0], iArr[1], iArr[2], iArr[3]);
        int i34 = iArr[0];
        int[] iArr26 = this.wKey;
        iArr[0] = i34 ^ iArr26[28];
        iArr[1] = iArr[1] ^ iArr26[29];
        iArr[2] = iArr[2] ^ iArr26[30];
        iArr[3] = iArr[3] ^ iArr26[31];
        inverseLT(iArr);
        ib6(iArr, iArr[0], iArr[1], iArr[2], iArr[3]);
        int i35 = iArr[0];
        int[] iArr27 = this.wKey;
        iArr[0] = i35 ^ iArr27[24];
        iArr[1] = iArr[1] ^ iArr27[25];
        iArr[2] = iArr[2] ^ iArr27[26];
        iArr[3] = iArr[3] ^ iArr27[27];
        inverseLT(iArr);
        ib5(iArr, iArr[0], iArr[1], iArr[2], iArr[3]);
        int i36 = iArr[0];
        int[] iArr28 = this.wKey;
        iArr[0] = i36 ^ iArr28[20];
        iArr[1] = iArr[1] ^ iArr28[21];
        iArr[2] = iArr[2] ^ iArr28[22];
        iArr[3] = iArr[3] ^ iArr28[23];
        inverseLT(iArr);
        ib4(iArr, iArr[0], iArr[1], iArr[2], iArr[3]);
        int i37 = iArr[0];
        int[] iArr29 = this.wKey;
        iArr[0] = i37 ^ iArr29[16];
        iArr[1] = iArr[1] ^ iArr29[17];
        iArr[2] = iArr[2] ^ iArr29[18];
        iArr[3] = iArr[3] ^ iArr29[19];
        inverseLT(iArr);
        ib3(iArr, iArr[0], iArr[1], iArr[2], iArr[3]);
        int i38 = iArr[0];
        int[] iArr30 = this.wKey;
        iArr[0] = i38 ^ iArr30[12];
        iArr[1] = iArr[1] ^ iArr30[13];
        iArr[2] = iArr[2] ^ iArr30[14];
        iArr[3] = iArr[3] ^ iArr30[15];
        inverseLT(iArr);
        ib2(iArr, iArr[0], iArr[1], iArr[2], iArr[3]);
        int i39 = iArr[0];
        int[] iArr31 = this.wKey;
        iArr[0] = i39 ^ iArr31[8];
        iArr[1] = iArr[1] ^ iArr31[9];
        iArr[2] = iArr[2] ^ iArr31[10];
        iArr[3] = iArr[3] ^ iArr31[11];
        inverseLT(iArr);
        ib1(iArr, iArr[0], iArr[1], iArr[2], iArr[3]);
        int i40 = iArr[0];
        int[] iArr32 = this.wKey;
        iArr[0] = i40 ^ iArr32[4];
        iArr[1] = iArr[1] ^ iArr32[5];
        iArr[2] = iArr[2] ^ iArr32[6];
        iArr[3] = iArr[3] ^ iArr32[7];
        inverseLT(iArr);
        ib0(iArr, iArr[0], iArr[1], iArr[2], iArr[3]);
        Pack.intToLittleEndian(iArr[0] ^ this.wKey[0], bArr2, i9);
        Pack.intToLittleEndian(iArr[1] ^ this.wKey[1], bArr2, i9 + 4);
        Pack.intToLittleEndian(iArr[2] ^ this.wKey[2], bArr2, i9 + 8);
        Pack.intToLittleEndian(iArr[3] ^ this.wKey[3], bArr2, i9 + 12);
    }

    @Override // org.bouncycastle.crypto.engines.SerpentEngineBase
    public void encryptBlock(byte[] bArr, int i, byte[] bArr2, int i9) {
        int[] iArr = {Pack.littleEndianToInt(bArr, i), Pack.littleEndianToInt(bArr, i + 4), Pack.littleEndianToInt(bArr, i + 8), Pack.littleEndianToInt(bArr, i + 12)};
        int[] iArr2 = this.wKey;
        sb0(iArr, iArr2[0] ^ iArr[0], iArr2[1] ^ iArr[1], iArr2[2] ^ iArr[2], iArr2[3] ^ iArr[3]);
        LT(iArr);
        int[] iArr3 = this.wKey;
        sb1(iArr, iArr3[4] ^ iArr[0], iArr3[5] ^ iArr[1], iArr3[6] ^ iArr[2], iArr3[7] ^ iArr[3]);
        LT(iArr);
        int[] iArr4 = this.wKey;
        sb2(iArr, iArr4[8] ^ iArr[0], iArr4[9] ^ iArr[1], iArr4[10] ^ iArr[2], iArr4[11] ^ iArr[3]);
        LT(iArr);
        int[] iArr5 = this.wKey;
        sb3(iArr, iArr5[12] ^ iArr[0], iArr5[13] ^ iArr[1], iArr5[14] ^ iArr[2], iArr5[15] ^ iArr[3]);
        LT(iArr);
        int[] iArr6 = this.wKey;
        sb4(iArr, iArr6[16] ^ iArr[0], iArr6[17] ^ iArr[1], iArr6[18] ^ iArr[2], iArr6[19] ^ iArr[3]);
        LT(iArr);
        int[] iArr7 = this.wKey;
        sb5(iArr, iArr7[20] ^ iArr[0], iArr7[21] ^ iArr[1], iArr7[22] ^ iArr[2], iArr7[23] ^ iArr[3]);
        LT(iArr);
        int[] iArr8 = this.wKey;
        sb6(iArr, iArr8[24] ^ iArr[0], iArr8[25] ^ iArr[1], iArr8[26] ^ iArr[2], iArr8[27] ^ iArr[3]);
        LT(iArr);
        int[] iArr9 = this.wKey;
        sb7(iArr, iArr9[28] ^ iArr[0], iArr9[29] ^ iArr[1], iArr9[30] ^ iArr[2], iArr9[31] ^ iArr[3]);
        LT(iArr);
        int[] iArr10 = this.wKey;
        sb0(iArr, iArr10[32] ^ iArr[0], iArr10[33] ^ iArr[1], iArr10[34] ^ iArr[2], iArr10[35] ^ iArr[3]);
        LT(iArr);
        int[] iArr11 = this.wKey;
        sb1(iArr, iArr11[36] ^ iArr[0], iArr11[37] ^ iArr[1], iArr11[38] ^ iArr[2], iArr11[39] ^ iArr[3]);
        LT(iArr);
        int[] iArr12 = this.wKey;
        sb2(iArr, iArr12[40] ^ iArr[0], iArr12[41] ^ iArr[1], iArr12[42] ^ iArr[2], iArr12[43] ^ iArr[3]);
        LT(iArr);
        int[] iArr13 = this.wKey;
        sb3(iArr, iArr13[44] ^ iArr[0], iArr13[45] ^ iArr[1], iArr13[46] ^ iArr[2], iArr13[47] ^ iArr[3]);
        LT(iArr);
        int[] iArr14 = this.wKey;
        sb4(iArr, iArr14[48] ^ iArr[0], iArr14[49] ^ iArr[1], iArr14[50] ^ iArr[2], iArr14[51] ^ iArr[3]);
        LT(iArr);
        int[] iArr15 = this.wKey;
        sb5(iArr, iArr15[52] ^ iArr[0], iArr15[53] ^ iArr[1], iArr15[54] ^ iArr[2], iArr15[55] ^ iArr[3]);
        LT(iArr);
        int[] iArr16 = this.wKey;
        sb6(iArr, iArr16[56] ^ iArr[0], iArr16[57] ^ iArr[1], iArr16[58] ^ iArr[2], iArr16[59] ^ iArr[3]);
        LT(iArr);
        int[] iArr17 = this.wKey;
        sb7(iArr, iArr17[60] ^ iArr[0], iArr17[61] ^ iArr[1], iArr17[62] ^ iArr[2], iArr17[63] ^ iArr[3]);
        LT(iArr);
        int[] iArr18 = this.wKey;
        sb0(iArr, iArr18[64] ^ iArr[0], iArr18[65] ^ iArr[1], iArr18[66] ^ iArr[2], iArr18[67] ^ iArr[3]);
        LT(iArr);
        int[] iArr19 = this.wKey;
        sb1(iArr, iArr19[68] ^ iArr[0], iArr19[69] ^ iArr[1], iArr19[70] ^ iArr[2], iArr19[71] ^ iArr[3]);
        LT(iArr);
        int[] iArr20 = this.wKey;
        sb2(iArr, iArr20[72] ^ iArr[0], iArr20[73] ^ iArr[1], iArr20[74] ^ iArr[2], iArr20[75] ^ iArr[3]);
        LT(iArr);
        int[] iArr21 = this.wKey;
        sb3(iArr, iArr21[76] ^ iArr[0], iArr21[77] ^ iArr[1], iArr21[78] ^ iArr[2], iArr21[79] ^ iArr[3]);
        LT(iArr);
        int[] iArr22 = this.wKey;
        sb4(iArr, iArr22[80] ^ iArr[0], iArr22[81] ^ iArr[1], iArr22[82] ^ iArr[2], iArr22[83] ^ iArr[3]);
        LT(iArr);
        int[] iArr23 = this.wKey;
        sb5(iArr, iArr23[84] ^ iArr[0], iArr23[85] ^ iArr[1], iArr23[86] ^ iArr[2], iArr23[87] ^ iArr[3]);
        LT(iArr);
        int[] iArr24 = this.wKey;
        sb6(iArr, iArr24[88] ^ iArr[0], iArr24[89] ^ iArr[1], iArr24[90] ^ iArr[2], iArr24[91] ^ iArr[3]);
        LT(iArr);
        int[] iArr25 = this.wKey;
        sb7(iArr, iArr25[92] ^ iArr[0], iArr25[93] ^ iArr[1], iArr25[94] ^ iArr[2], iArr25[95] ^ iArr[3]);
        LT(iArr);
        int[] iArr26 = this.wKey;
        sb0(iArr, iArr26[96] ^ iArr[0], iArr26[97] ^ iArr[1], iArr26[98] ^ iArr[2], iArr26[99] ^ iArr[3]);
        LT(iArr);
        int[] iArr27 = this.wKey;
        sb1(iArr, iArr27[100] ^ iArr[0], iArr27[101] ^ iArr[1], iArr27[102] ^ iArr[2], iArr27[103] ^ iArr[3]);
        LT(iArr);
        int[] iArr28 = this.wKey;
        sb2(iArr, iArr28[104] ^ iArr[0], iArr28[105] ^ iArr[1], iArr28[106] ^ iArr[2], iArr28[107] ^ iArr[3]);
        LT(iArr);
        int[] iArr29 = this.wKey;
        sb3(iArr, iArr29[108] ^ iArr[0], iArr29[109] ^ iArr[1], iArr29[110] ^ iArr[2], iArr29[111] ^ iArr[3]);
        LT(iArr);
        int[] iArr30 = this.wKey;
        sb4(iArr, iArr30[112] ^ iArr[0], iArr30[113] ^ iArr[1], iArr30[114] ^ iArr[2], iArr30[115] ^ iArr[3]);
        LT(iArr);
        int[] iArr31 = this.wKey;
        sb5(iArr, iArr31[116] ^ iArr[0], iArr31[117] ^ iArr[1], iArr31[118] ^ iArr[2], iArr31[119] ^ iArr[3]);
        LT(iArr);
        int[] iArr32 = this.wKey;
        sb6(iArr, iArr32[120] ^ iArr[0], iArr32[121] ^ iArr[1], iArr32[122] ^ iArr[2], iArr32[123] ^ iArr[3]);
        LT(iArr);
        int[] iArr33 = this.wKey;
        sb7(iArr, iArr33[124] ^ iArr[0], iArr33[125] ^ iArr[1], iArr33[126] ^ iArr[2], iArr33[127] ^ iArr[3]);
        Pack.intToLittleEndian(this.wKey[128] ^ iArr[0], bArr2, i9);
        Pack.intToLittleEndian(this.wKey[129] ^ iArr[1], bArr2, i9 + 4);
        Pack.intToLittleEndian(this.wKey[130] ^ iArr[2], bArr2, i9 + 8);
        Pack.intToLittleEndian(iArr[3] ^ this.wKey[131], bArr2, i9 + 12);
    }

    @Override // org.bouncycastle.crypto.engines.SerpentEngineBase
    public int[] makeWorkingKey(byte[] bArr) {
        int[] iArr = new int[16];
        int i = 0;
        int i9 = 0;
        while (true) {
            int i10 = i + 4;
            if (i10 >= bArr.length) {
                break;
            }
            iArr[i9] = Pack.littleEndianToInt(bArr, i);
            i = i10;
            i9++;
        }
        if (i % 4 != 0) {
            throw new IllegalArgumentException("key must be a multiple of 4 bytes");
        }
        int i11 = i9 + 1;
        iArr[i9] = Pack.littleEndianToInt(bArr, i);
        if (i11 < 8) {
            iArr[i11] = 1;
        }
        int[] iArr2 = new int[132];
        for (int i12 = 8; i12 < 16; i12++) {
            int i13 = i12 - 8;
            iArr[i12] = SerpentEngineBase.rotateLeft(((-1640531527) ^ (((iArr[i13] ^ iArr[i12 - 5]) ^ iArr[i12 - 3]) ^ iArr[i12 - 1])) ^ i13, 11);
        }
        System.arraycopy(iArr, 8, iArr2, 0, 8);
        for (int i14 = 8; i14 < 132; i14++) {
            iArr2[i14] = SerpentEngineBase.rotateLeft(((((iArr2[i14 - 8] ^ iArr2[i14 - 5]) ^ iArr2[i14 - 3]) ^ iArr2[i14 - 1]) ^ (-1640531527)) ^ i14, 11);
        }
        int[] iArr3 = new int[4];
        sb3(iArr3, iArr2[0], iArr2[1], iArr2[2], iArr2[3]);
        iArr2[0] = iArr3[0];
        iArr2[1] = iArr3[1];
        iArr2[2] = iArr3[2];
        iArr2[3] = iArr3[3];
        sb2(iArr3, iArr2[4], iArr2[5], iArr2[6], iArr2[7]);
        iArr2[4] = iArr3[0];
        iArr2[5] = iArr3[1];
        iArr2[6] = iArr3[2];
        iArr2[7] = iArr3[3];
        sb1(iArr3, iArr2[8], iArr2[9], iArr2[10], iArr2[11]);
        iArr2[8] = iArr3[0];
        iArr2[9] = iArr3[1];
        iArr2[10] = iArr3[2];
        iArr2[11] = iArr3[3];
        sb0(iArr3, iArr2[12], iArr2[13], iArr2[14], iArr2[15]);
        iArr2[12] = iArr3[0];
        iArr2[13] = iArr3[1];
        iArr2[14] = iArr3[2];
        iArr2[15] = iArr3[3];
        sb7(iArr3, iArr2[16], iArr2[17], iArr2[18], iArr2[19]);
        iArr2[16] = iArr3[0];
        iArr2[17] = iArr3[1];
        iArr2[18] = iArr3[2];
        iArr2[19] = iArr3[3];
        sb6(iArr3, iArr2[20], iArr2[21], iArr2[22], iArr2[23]);
        iArr2[20] = iArr3[0];
        iArr2[21] = iArr3[1];
        iArr2[22] = iArr3[2];
        iArr2[23] = iArr3[3];
        sb5(iArr3, iArr2[24], iArr2[25], iArr2[26], iArr2[27]);
        iArr2[24] = iArr3[0];
        iArr2[25] = iArr3[1];
        iArr2[26] = iArr3[2];
        iArr2[27] = iArr3[3];
        sb4(iArr3, iArr2[28], iArr2[29], iArr2[30], iArr2[31]);
        iArr2[28] = iArr3[0];
        iArr2[29] = iArr3[1];
        iArr2[30] = iArr3[2];
        iArr2[31] = iArr3[3];
        sb3(iArr3, iArr2[32], iArr2[33], iArr2[34], iArr2[35]);
        iArr2[32] = iArr3[0];
        iArr2[33] = iArr3[1];
        iArr2[34] = iArr3[2];
        iArr2[35] = iArr3[3];
        sb2(iArr3, iArr2[36], iArr2[37], iArr2[38], iArr2[39]);
        iArr2[36] = iArr3[0];
        iArr2[37] = iArr3[1];
        iArr2[38] = iArr3[2];
        iArr2[39] = iArr3[3];
        sb1(iArr3, iArr2[40], iArr2[41], iArr2[42], iArr2[43]);
        iArr2[40] = iArr3[0];
        iArr2[41] = iArr3[1];
        iArr2[42] = iArr3[2];
        iArr2[43] = iArr3[3];
        sb0(iArr3, iArr2[44], iArr2[45], iArr2[46], iArr2[47]);
        iArr2[44] = iArr3[0];
        iArr2[45] = iArr3[1];
        iArr2[46] = iArr3[2];
        iArr2[47] = iArr3[3];
        sb7(iArr3, iArr2[48], iArr2[49], iArr2[50], iArr2[51]);
        iArr2[48] = iArr3[0];
        iArr2[49] = iArr3[1];
        iArr2[50] = iArr3[2];
        iArr2[51] = iArr3[3];
        sb6(iArr3, iArr2[52], iArr2[53], iArr2[54], iArr2[55]);
        iArr2[52] = iArr3[0];
        iArr2[53] = iArr3[1];
        iArr2[54] = iArr3[2];
        iArr2[55] = iArr3[3];
        sb5(iArr3, iArr2[56], iArr2[57], iArr2[58], iArr2[59]);
        iArr2[56] = iArr3[0];
        iArr2[57] = iArr3[1];
        iArr2[58] = iArr3[2];
        iArr2[59] = iArr3[3];
        sb4(iArr3, iArr2[60], iArr2[61], iArr2[62], iArr2[63]);
        iArr2[60] = iArr3[0];
        iArr2[61] = iArr3[1];
        iArr2[62] = iArr3[2];
        iArr2[63] = iArr3[3];
        sb3(iArr3, iArr2[64], iArr2[65], iArr2[66], iArr2[67]);
        iArr2[64] = iArr3[0];
        iArr2[65] = iArr3[1];
        iArr2[66] = iArr3[2];
        iArr2[67] = iArr3[3];
        sb2(iArr3, iArr2[68], iArr2[69], iArr2[70], iArr2[71]);
        iArr2[68] = iArr3[0];
        iArr2[69] = iArr3[1];
        iArr2[70] = iArr3[2];
        iArr2[71] = iArr3[3];
        sb1(iArr3, iArr2[72], iArr2[73], iArr2[74], iArr2[75]);
        iArr2[72] = iArr3[0];
        iArr2[73] = iArr3[1];
        iArr2[74] = iArr3[2];
        iArr2[75] = iArr3[3];
        sb0(iArr3, iArr2[76], iArr2[77], iArr2[78], iArr2[79]);
        iArr2[76] = iArr3[0];
        iArr2[77] = iArr3[1];
        iArr2[78] = iArr3[2];
        iArr2[79] = iArr3[3];
        sb7(iArr3, iArr2[80], iArr2[81], iArr2[82], iArr2[83]);
        iArr2[80] = iArr3[0];
        iArr2[81] = iArr3[1];
        iArr2[82] = iArr3[2];
        iArr2[83] = iArr3[3];
        sb6(iArr3, iArr2[84], iArr2[85], iArr2[86], iArr2[87]);
        iArr2[84] = iArr3[0];
        iArr2[85] = iArr3[1];
        iArr2[86] = iArr3[2];
        iArr2[87] = iArr3[3];
        sb5(iArr3, iArr2[88], iArr2[89], iArr2[90], iArr2[91]);
        iArr2[88] = iArr3[0];
        iArr2[89] = iArr3[1];
        iArr2[90] = iArr3[2];
        iArr2[91] = iArr3[3];
        sb4(iArr3, iArr2[92], iArr2[93], iArr2[94], iArr2[95]);
        iArr2[92] = iArr3[0];
        iArr2[93] = iArr3[1];
        iArr2[94] = iArr3[2];
        iArr2[95] = iArr3[3];
        sb3(iArr3, iArr2[96], iArr2[97], iArr2[98], iArr2[99]);
        iArr2[96] = iArr3[0];
        iArr2[97] = iArr3[1];
        iArr2[98] = iArr3[2];
        iArr2[99] = iArr3[3];
        sb2(iArr3, iArr2[100], iArr2[101], iArr2[102], iArr2[103]);
        iArr2[100] = iArr3[0];
        iArr2[101] = iArr3[1];
        iArr2[102] = iArr3[2];
        iArr2[103] = iArr3[3];
        sb1(iArr3, iArr2[104], iArr2[105], iArr2[106], iArr2[107]);
        iArr2[104] = iArr3[0];
        iArr2[105] = iArr3[1];
        iArr2[106] = iArr3[2];
        iArr2[107] = iArr3[3];
        sb0(iArr3, iArr2[108], iArr2[109], iArr2[110], iArr2[111]);
        iArr2[108] = iArr3[0];
        iArr2[109] = iArr3[1];
        iArr2[110] = iArr3[2];
        iArr2[111] = iArr3[3];
        sb7(iArr3, iArr2[112], iArr2[113], iArr2[114], iArr2[115]);
        iArr2[112] = iArr3[0];
        iArr2[113] = iArr3[1];
        iArr2[114] = iArr3[2];
        iArr2[115] = iArr3[3];
        sb6(iArr3, iArr2[116], iArr2[117], iArr2[118], iArr2[119]);
        iArr2[116] = iArr3[0];
        iArr2[117] = iArr3[1];
        iArr2[118] = iArr3[2];
        iArr2[119] = iArr3[3];
        sb5(iArr3, iArr2[120], iArr2[121], iArr2[122], iArr2[123]);
        iArr2[120] = iArr3[0];
        iArr2[121] = iArr3[1];
        iArr2[122] = iArr3[2];
        iArr2[123] = iArr3[3];
        sb4(iArr3, iArr2[124], iArr2[125], iArr2[126], iArr2[127]);
        iArr2[124] = iArr3[0];
        iArr2[125] = iArr3[1];
        iArr2[126] = iArr3[2];
        iArr2[127] = iArr3[3];
        sb3(iArr3, iArr2[128], iArr2[129], iArr2[130], iArr2[131]);
        iArr2[128] = iArr3[0];
        iArr2[129] = iArr3[1];
        iArr2[130] = iArr3[2];
        iArr2[131] = iArr3[3];
        return iArr2;
    }

    @Override // org.bouncycastle.crypto.StatelessProcessing
    public BlockCipher newInstance() {
        return new SerpentEngine();
    }
}
